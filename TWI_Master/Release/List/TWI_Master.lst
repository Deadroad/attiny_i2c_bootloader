###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel AVR    16/Aug/2011  11:15:40 #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  E:\F Drive\Project\Bootloader project\Code\Common for    #
#                    All Devices\TWI_Master\TWI_Master.c                      #
#    Command line =  "E:\F Drive\Project\Bootloader project\Code\Common for   #
#                    All Devices\TWI_Master\TWI_Master.c" --cpu=m2560 -ms -o  #
#                    "E:\F Drive\Project\Bootloader project\Code\Common for   #
#                    All Devices\TWI_Master\Release\Obj\" -D __ATMEGA2560__   #
#                    --preprocess "E:\F Drive\Project\Bootloader              #
#                    project\Code\Common for All                              #
#                    Devices\TWI_Master\Release\List\" -lCN "E:\F             #
#                    Drive\Project\Bootloader project\Code\Common for All     #
#                    Devices\TWI_Master\Release\List\" -lB "E:\F              #
#                    Drive\Project\Bootloader project\Code\Common for All     #
#                    Devices\TWI_Master\Release\List\" -y                     #
#                    --initializers_in_flash -z9 -DENABLE_BIT_DEFINITIONS -e  #
#                    -I "C:\Program Files\IAR Systems\Embedded Workbench      #
#                    5.4\avr\INC\" -I "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 5.4\avr\INC\CLIB\" --eeprom_size 4096          #
#    List file    =  E:\F Drive\Project\Bootloader project\Code\Common for    #
#                    All Devices\TWI_Master\Release\List\TWI_Master.lst       #
#    Object file  =  E:\F Drive\Project\Bootloader project\Code\Common for    #
#                    All Devices\TWI_Master\Release\Obj\TWI_Master.r90        #
#                                                                             #
#                                                                             #
###############################################################################

E:\F Drive\Project\Bootloader project\Code\Common for All Devices\TWI_Master\TWI_Master.c
      1          #include <inavr.h>
      2          #include "defines.h"

   \                                 In  segment ABSOLUTE, at 0xbc
   \   <__C135> volatile __io _A_TWCR
   \                     _A_TWCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xbb
   \   <__C137> volatile __io _A_TWDR
   \                     _A_TWDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb9
   \   <__C143> volatile __io _A_TWSR
   \                     _A_TWSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb8
   \   <__C145> volatile __io _A_TWBR
   \                     _A_TWBR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   <__C455> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   <__C458> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   <__C464> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   <__C467> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1
      3          #include "serial.h"
      4          #include "flash.h"
      5          #include "stdint.h"
      6          
      7          #define TWI_DDR_REG  DDRD
      8          #define TWI_PORT_REG PORTD
      9          #define TWI_SCL_PIN  PD0
     10          #define TWI_SDA_PIN  PD1
     11          
     12          #define BOOT_DDR_REG      DDRC
     13          #define BOOT_PORT_REG     PORTC
     14          #define BOOT_PIN          PC0
     15          
     16          #define RESET_DDR_REG      DDRC
     17          #define RESET_PORT_REG     PORTC
     18          #define RESET_PIN          PC1
     19          
     20          
     21          // Select the type of communication based on the slave device
     22          #if defined(_ATTINY25)   || defined(_ATTINY25V) || \
     23              defined(_ATTINY45)   || defined(_ATTINY45V) || \
     24              defined(_ATTINY85)   || defined(_ATTINY85V) || \
     25              defined(_ATTINY24)   || defined(_ATTINY24A) || \
     26              defined(_ATTINY44)   || defined(_ATTINY44A) || \
     27              defined(_ATTINY84)   || defined(_ATTINY84A) || \
     28              defined(_ATTINY2313) || defined(_ATTINY2313A) || \
     29              defined(_ATTINY4313) || defined(_ATTINY4313A) || \
     30              defined(_ATTINY261)  || defined(_ATTINY261A) || \
     31              defined(_ATTINY461)  || defined(_ATTINY461A) || \
     32              defined(_ATTINY861)  || defined(_ATTINY861A) || \
     33              defined(_ATTINY43U)  || \
     34              defined(_ATTINY87)   || \
     35              defined(_ATTINY167)
     36          #define _USI  // set the communication type as USI
     37                
     38          #endif 
     39          #if defined(_ATTINY48) || defined(_ATTINY88) || \
     40              defined(_ATMEGA48A) || defined(_ATTINY48PA)
     41          #define _TWI
     42          
     43          #endif      
     44             
     45          // Page size selection for the controller with 2K flash
     46          #if defined(_ATTINY25)   || defined(_ATTINY25V) || \
     47              defined(_ATTINY24)   || defined(_ATTINY24A) || \
     48              defined(_ATTINY2313) || defined(_ATTINY2313A) || \
     49              defined(_ATTINY261)  || defined(_ATTINY261A)
     50          
     51              #define PAGE_SIZE 32      //16 words = 32 Bytes
     52              #define MAX__APP_ADDR 0X0400      // Maximum Application Address
     53          #endif
     54          // Page size selection for the controller with 4K flash
     55          
     56                #if defined(_ATTINY45)   || defined(_ATTINY45V) || \
     57                    defined(_ATTINY44)   || defined(_ATTINY44A) || \
     58                    defined(_ATTINY4313) || defined(_ATTINY4313A) || \
     59                    defined(_ATTINY461)  || defined(_ATTINY461A) || \
     60                    defined(_ATTINY43U)  || \
     61                    defined(_ATTINY48)   || \
     62                    defined(_ATMEGA48)   || defined(_ATMEGA48A)  || \
     63                    defined(_ATMEGA48PA)
     64                          
     65                    #define PAGE_SIZE 64      // 32 words = 64 Bytes
     66                    #define MAX__APP_ADDR 0X0C00      // Maximum Application Address
     67          #endif
     68          // Page size selection for the controller with 8K flash
     69           
     70                #if defined(_ATTINY85)   || defined(_ATTINY85V) || \
     71                    defined(_ATTINY84)   || defined(_ATTINY84A) || \
     72                    defined(_ATTINY861)  || defined(_ATTINY861A) || \
     73                    defined(_ATTINY87)   || \
     74                    defined(_ATTINY88)
     75                       
     76                    #define PAGE_SIZE 64      // 32 words = 64 Bytes
     77                    #define MAX__APP_ADDR 0X1800      // Maximum Application Address
     78                                                      // 0x1c00 means.. 1K bytes for Bootloader
     79                                                      // 0x1800 Means... 2K bytes for Bootloader
     80              
     81          #endif
     82          // Page size selection for the controller with 16K flash   
     83          
     84                #if defined(_ATTINY167) 
     85                
     86                    #define PAGE_SIZE 128    // 64 words = 128 Bytes
     87                    #define MAX__APP_ADDR 0X3C00     // Maximum Application Address
     88                #endif      
     89           
     90                
     91          
     92          
     93          #define SLAVE_ADDRESS 0xb0
     94          
     95          #define _BV( __THE_LOCATION_OF_PIN__ )    ( 1u << __THE_LOCATION_OF_PIN__ )
     96          
     97          unsigned char BlockLoad(unsigned int size, unsigned char mem);
     98          /* BLOCKSIZE should be chosen so that the following holds: BLOCKSIZE*n = PAGESIZE,  where n=1,2,3... */
     99          
    100          #define BLOCKSIZE PAGE_SIZE
    101          
    102          

   \                                 In  segment FARCODE, align 2, keep-with-next
    103          void InitTWI( void )
   \                     InitTWI:
    104          {
    105          	TWI_DDR_REG &= ~((1 << TWI_SCL_PIN) | (1 << TWI_SDA_PIN));
   \   00000000   B10A               IN      R16, 0x0A
   \   00000002   7F0C               ANDI    R16, 0xFC
   \   00000004   B90A               OUT     0x0A, R16
    106          	TWI_PORT_REG &= ~((1 << TWI_SCL_PIN) | (1 << TWI_SDA_PIN));
   \   00000006   B10B               IN      R16, 0x0B
   \   00000008   7F0C               ANDI    R16, 0xFC
   \   0000000A   B90B               OUT     0x0B, R16
    107          	
    108          	// Init TWI as master.
    109          	TWCR = (1 << TWEN);
   \   0000000C   E004               LDI     R16, 4
   \   0000000E   ....               RCALL   ??Subroutine17_0
    110          	TWBR = 16; // 250bps @ 8MHz.
   \                     ??CrossCallReturnLabel_48:
   \   00000010   E100               LDI     R16, 16
   \   00000012   9300....           STS     _A_TWBR, R16
    111          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_TWCR
   \   00000018                      REQUIRE _A_TWBR
   \   00000018                      REQUIRE _A_PORTD
   \   00000018                      REQUIRE _A_DDRD

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ??Subroutine17_0:
   \   00000000   9300....           STS     _A_TWCR, R16
   \   00000004   9508               RET
    112          
    113          
    114          #define TWI_CMD_PAGEUPDATE        0x01
    115          #define TWI_CMD_EXECUTEAPP        0x02
    116          #define TWI_CMD_AVERSION          0x03
    117          #define TWI_CMD_BVERSION          0x04
    118          #define TWI_CMD_ERASEFLASH        0x05
    119          #define TWI_CMD_CRCCHECK          0x06
    120          #define TWI_CMD_GETERRCONDN       0x07
    121          
    122          #define TWI_START_TRANSMITTED     0x08
    123          #define TWI_SLAW_ACKED            0x18
    124          #define TWI_TXDATA_ACKED          0x28
    125          #define TWI_TXDATA_NACKED         0x30
    126          #define TWI_SLAR_ACKED            0x40
    127          #define TWI_RXDATA_ACKED          0x50
    128          #define TWI_RXDATA_NACKED         0x58
    129          
    130          uint8_t statusCode;
    131          uint8_t success;
    132          uint8_t over_size_flag=0;
    133          

   \                                 In  segment FARCODE, align 2, keep-with-next
    134          void cycle_reset(void)
   \                     cycle_reset:
    135          {
    136              RESET_PORT_REG &= ~(1 << RESET_PIN);
   \   00000000   9841               CBI     0x08, 0x01
    137              __delay_cycles( 10000 );
   \   00000002   ....               RCALL   ?Subroutine1
    138              RESET_PORT_REG |= (1 << RESET_PIN);
   \                     ??CrossCallReturnLabel_0:
   \   00000004   9A41               SBI     0x08, 0x01
    139              __delay_cycles( 10000 );
   \   00000006                      REQUIRE ?Subroutine1
   \   00000006                      REQUIRE _A_PORTC
   \   00000006                      ;               // Fall through to label ?Subroutine1
    140          }

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   EC03               LDI     R16, 195
   \   00000002   E019               LDI     R17, 9
   \   00000004   5001               SUBI    R16, 1
   \   00000006   4010               SBCI    R17, 0
   \   00000008   F7E9               BRNE    $-4
   \   0000000A   C000               RJMP    $+2
   \   0000000C   0000               NOP
   \   0000000E   9508               RET
    141          
    142          

   \                                 In  segment FARCODE, align 2, keep-with-next
    143          uint8_t MasterReceive( uint8_t address, uint8_t * data, uint16_t length )
   \                     MasterReceive:
    144          {
   \   00000000   ....               RCALL   ?Subroutine2
    145          	uint8_t error = 0;
    146          	
    147          	// START condition.
    148          	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    149          	do {} while ((TWCR & (1 << TWINT)) == 0);
   \                     ??CrossCallReturnLabel_1:
   \   00000002   9110....           LDS     R17, _A_TWCR
   \   00000006   FF17               SBRS    R17, 7
   \   00000008   CFFC               RJMP    ??CrossCallReturnLabel_1
    150          	error = (TWSR != TWI_START_TRANSMITTED);
   \   0000000A   9110....           LDS     R17, _A_TWSR
   \   0000000E   3018               CPI     R17, 8
   \   00000010   F011               BREQ    ??MasterReceive_0
   \                     ??MasterReceive_1:
   \   00000012   E011               LDI     R17, 1
   \   00000014   C009               RJMP    ??MasterReceive_2
   \                     ??MasterReceive_0:
   \   00000016   E010               LDI     R17, 0
    151          
    152          	// Send SLA+R.
    153          	if (!error) {
    154          		TWDR = (address & ~0x01) | 0x01; // LSB set = Read.
   \   00000018   6001               ORI     R16, 0x01
   \   0000001A   ....               RCALL   ?Subroutine0
    155          		TWCR = (1 << TWINT) | (1 << TWEN);
    156          		do {} while ((TWCR & (1 << TWINT)) == 0);
   \                     ??CrossCallReturnLabel_45:
   \   0000001C   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_3:
   \   0000001E   FF07               SBRS    R16, 7
   \   00000020   CFFD               RJMP    ??CrossCallReturnLabel_45
    157          		error = (TWSR != TWI_SLAR_ACKED);
   \   00000022   ....               RCALL   ?Subroutine4
    158          	}
   \                     ??CrossCallReturnLabel_7:
   \   00000024   3400               CPI     R16, 64
   \   00000026   F7A9               BRNE    ??MasterReceive_1
    159          	
    160          	// Read data bytes minus the last one. Return ACK.
    161          	uint8_t * bufferPtr = data;
   \                     ??MasterReceive_2:
   \   00000028   01F9               MOVW    R31:R30, R19:R18
    162          	if (!error) {
   \   0000002A   2311               TST     R17
   \   0000002C   F519               BRNE    ??MasterReceive_3
    163          		for (uint16_t i = 0; i < (length - 1); ++i) {
   \   0000002E   E000               LDI     R16, 0
   \   00000030   E010               LDI     R17, 0
   \   00000032   C010               RJMP    ??MasterReceive_4
    164          			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
   \                     ??MasterReceive_5:
   \   00000034   EC24               LDI     R18, 196
   \   00000036   9320....           STS     _A_TWCR, R18
    165          			do {} while ((TWCR & (1 << TWINT)) == 0);
   \                     ??MasterReceive_6:
   \   0000003A   9120....           LDS     R18, _A_TWCR
   \   0000003E   FF27               SBRS    R18, 7
   \   00000040   CFFC               RJMP    ??MasterReceive_6
    166          			error = (TWSR != TWI_RXDATA_ACKED);
   \   00000042   9120....           LDS     R18, _A_TWSR
   \   00000046   3520               CPI     R18, 80
   \   00000048   F4A9               BRNE    ??MasterReceive_3
    167          			if (!error) {
    168          				*bufferPtr = TWDR;
   \   0000004A   9120....           LDS     R18, _A_TWDR
   \   0000004E   9321               ST      Z+, R18
    169          				++bufferPtr;
    170          			} else {
    171          				break;
    172          			}
    173          		}
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \                     ??MasterReceive_4:
   \   00000054   ....               RCALL   ?Subroutine5
    174          	}
   \                     ??CrossCallReturnLabel_11:
   \   00000056   F370               BRCS    ??MasterReceive_5
    175          	
    176          	// Read last data byte. Return NACK.
    177          	if (!error) {
    178          		TWCR = (1 << TWINT) | (1 << TWEN);
   \   00000058   ....               RCALL   ??Subroutine16_0
    179          		do {} while ((TWCR & (1 << TWINT)) == 0);
   \                     ??CrossCallReturnLabel_53:
   \   0000005A   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   0000005C   FF07               SBRS    R16, 7
   \   0000005E   CFFD               RJMP    ??CrossCallReturnLabel_53
    180          		error = (TWSR != TWI_RXDATA_NACKED);
   \   00000060   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_8:
   \   00000062   3508               CPI     R16, 88
   \   00000064   F439               BRNE    ??MasterReceive_3
    181          		if (!error) {
    182          			*bufferPtr = TWDR;
   \   00000066   9100....           LDS     R16, _A_TWDR
   \   0000006A   8300               ST      Z, R16
    183          			TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
   \   0000006C   E904               LDI     R16, 148
   \   0000006E   ....               RCALL   ??Subroutine17_0
    184          		}
    185          	}
    186          
    187          	// Abort communication if error.
    188          	if (error) {
    189          		TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
    190          	}
    191          	
    192          	return (!error);
   \                     ??CrossCallReturnLabel_49:
   \   00000070   E001               LDI     R16, 1
   \   00000072   C003               RJMP    ??MasterReceive_7
   \                     ??MasterReceive_3:
   \   00000074   E904               LDI     R16, 148
   \   00000076   ....               RCALL   ??Subroutine17_0
   \                     ??CrossCallReturnLabel_50:
   \   00000078   E000               LDI     R16, 0
   \                     ??MasterReceive_7:
   \   0000007A                      REQUIRE ?Subroutine14
   \   0000007A                      REQUIRE _A_TWCR
   \   0000007A                      REQUIRE _A_TWDR
   \   0000007A                      REQUIRE _A_TWSR
   \   0000007A                      ;               // Fall through to label ?Subroutine14
    193          }

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   01CB               MOVW    R25:R24, R23:R22
   \   00000002   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   9300....           STS     _A_TWDR, R16
   \   00000004                      REQUIRE ??Subroutine16_0
   \   00000004                      ;               // Fall through to label ??Subroutine16_0

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ??Subroutine16_0:
   \   00000000   E804               LDI     R16, 132
   \   00000002                      REQUIRE ??Subroutine17_0
   \   00000002                      ;               // Fall through to label ??Subroutine17_0

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   01CA               MOVW    R25:R24, R21:R20
   \   00000002   9701               SBIW    R25:R24, 1
   \   00000004   1708               CP      R16, R24
   \   00000006   0719               CPC     R17, R25
   \   00000008   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   9100....           LDS     R16, _A_TWSR
   \   00000004   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9100....           LDS     R16, _A_TWCR
   \   00000004   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   01BC               MOVW    R23:R22, R25:R24
   \   00000002   EA14               LDI     R17, 164
   \   00000004   9310....           STS     _A_TWCR, R17
   \   00000008   9508               RET
    194          
    195          
    196          

   \                                 In  segment FARCODE, align 2, keep-with-next
    197          void get_slave_status(void)
   \                     get_slave_status:
   \                     ??get_slave_status_0:
    198          {
   \   00000000   ....               RCALL   ?Subroutine7
    199               do {
    200          	  success = MasterReceive( SLAVE_ADDRESS, &statusCode, 1 );
    201          	} while ((statusCode != 0) || (!success));
   \                     ??CrossCallReturnLabel_29:
   \   00000002   9110....           LDS     R17, (addr + 4)
   \   00000006   2311               TST     R17
   \   00000008   F7D9               BRNE    ??get_slave_status_0
   \   0000000A   2300               TST     R16
   \   0000000C   F3C9               BREQ    ??get_slave_status_0
    202          }
   \   0000000E   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   E041               LDI     R20, 1
   \   00000002   E050               LDI     R21, 0
   \   00000004   ....               LDI     R18, LOW((addr + 4))
   \   00000006   ....               LDI     R19, HIGH((addr + 4))
   \   00000008   EB00               LDI     R16, 176
   \   0000000A   ....               RCALL   MasterReceive
   \   0000000C                      REQUIRE ?Subroutine13
   \   0000000C                      ;               // Fall through to label ?Subroutine13

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   9300....           STS     (addr + 5), R16
   \   00000004   9508               RET
    203          
    204          
    205          

   \                                 In  segment FARCODE, align 2, keep-with-next
    206          uint8_t MasterTransmit( uint8_t address, uint8_t * data, uint16_t length )
   \                     MasterTransmit:
    207          {
   \   00000000   ....               RCALL   ?Subroutine2
    208          	uint8_t error = 0;
    209          	
    210          	// START condition.
    211          	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    212          	do {} while ((TWCR & (1 << TWINT)) == 0);
   \                     ??CrossCallReturnLabel_2:
   \   00000002   9110....           LDS     R17, _A_TWCR
   \   00000006   FF17               SBRS    R17, 7
   \   00000008   CFFC               RJMP    ??CrossCallReturnLabel_2
    213          	error = (TWSR != TWI_START_TRANSMITTED);
   \   0000000A   9110....           LDS     R17, _A_TWSR
   \   0000000E   3018               CPI     R17, 8
   \   00000010   F011               BREQ    ??MasterTransmit_0
   \                     ??MasterTransmit_1:
   \   00000012   E011               LDI     R17, 1
   \   00000014   C009               RJMP    ??MasterTransmit_2
   \                     ??MasterTransmit_0:
   \   00000016   E010               LDI     R17, 0
    214          
    215          	// Send SLA+W.
    216          	if (!error) {
    217          		TWDR = (address & ~0x01) | 0x00; // LSB cleared = Write.
   \   00000018   7F0E               ANDI    R16, 0xFE
   \   0000001A   ....               RCALL   ?Subroutine0
    218          		TWCR = (1 << TWINT) | (1 << TWEN);
    219          		do {} while ((TWCR & (1 << TWINT)) == 0);
   \                     ??CrossCallReturnLabel_46:
   \   0000001C   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   0000001E   FF07               SBRS    R16, 7
   \   00000020   CFFD               RJMP    ??CrossCallReturnLabel_46
    220          		error = (TWSR != TWI_SLAW_ACKED);
   \   00000022   ....               RCALL   ?Subroutine4
    221          	}
   \                     ??CrossCallReturnLabel_9:
   \   00000024   3108               CPI     R16, 24
   \   00000026   F7A9               BRNE    ??MasterTransmit_1
    222          	
    223          	// Send data bytes minus the last one. Expect ACK.
    224          	const uint8_t * bufferPtr = data;
   \                     ??MasterTransmit_2:
   \   00000028   01F9               MOVW    R31:R30, R19:R18
    225          	if (!error) {
   \   0000002A   2311               TST     R17
   \   0000002C   F509               BRNE    ??MasterTransmit_3
    226          		for (uint16_t i = 0; i < (length - 1); ++i) {
   \   0000002E   E000               LDI     R16, 0
   \   00000030   E010               LDI     R17, 0
   \   00000032   C010               RJMP    ??MasterTransmit_4
    227          			TWDR = *bufferPtr;
   \                     ??MasterTransmit_5:
   \   00000034   9121               LD      R18, Z+
   \   00000036   9320....           STS     _A_TWDR, R18
    228          			TWCR = (1 << TWINT) | (1 << TWEN);
   \   0000003A   E824               LDI     R18, 132
   \   0000003C   9320....           STS     _A_TWCR, R18
    229          			do {} while ((TWCR & (1 << TWINT)) == 0);
   \                     ??MasterTransmit_6:
   \   00000040   9120....           LDS     R18, _A_TWCR
   \   00000044   FF27               SBRS    R18, 7
   \   00000046   CFFC               RJMP    ??MasterTransmit_6
    230          			error = (TWSR != TWI_TXDATA_ACKED);
   \   00000048   9120....           LDS     R18, _A_TWSR
   \   0000004C   3228               CPI     R18, 40
   \   0000004E   F481               BRNE    ??MasterTransmit_3
    231          			if (!error) {
    232          				++bufferPtr;
    233          			} else {
    234          				break;
    235          			}
    236          		}
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \                     ??MasterTransmit_4:
   \   00000054   ....               RCALL   ?Subroutine5
    237          	}
   \                     ??CrossCallReturnLabel_12:
   \   00000056   F370               BRCS    ??MasterTransmit_5
    238          	
    239          	// Send last data byte. Expect NACK.
    240          	if (!error) {
    241          		TWDR = *bufferPtr;
   \   00000058   8100               LD      R16, Z
   \   0000005A   ....               RCALL   ?Subroutine0
    242          		TWCR = (1 << TWINT) | (1 << TWEN);
    243          		do {} while ((TWCR & (1 << TWINT)) == 0);
   \                     ??CrossCallReturnLabel_47:
   \   0000005C   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   0000005E   FF07               SBRS    R16, 7
   \   00000060   CFFD               RJMP    ??CrossCallReturnLabel_47
    244          		error = (TWSR != TWI_TXDATA_NACKED);
   \   00000062   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_10:
   \   00000064   3300               CPI     R16, 48
   \   00000066   F421               BRNE    ??MasterTransmit_3
    245          		if (!error) {
    246          			TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
   \   00000068   E904               LDI     R16, 148
   \   0000006A   ....               RCALL   ??Subroutine17_0
    247          		}
    248          	}
    249          
    250          	// Abort communication if error.
    251          	if (error) {
    252          		TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
    253          	}
    254          	
    255          	return (!error);
   \                     ??CrossCallReturnLabel_51:
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   C003               RJMP    ??MasterTransmit_7
   \                     ??MasterTransmit_3:
   \   00000070   E904               LDI     R16, 148
   \   00000072   ....               RCALL   ??Subroutine17_0
   \                     ??CrossCallReturnLabel_52:
   \   00000074   E000               LDI     R16, 0
   \                     ??MasterTransmit_7:
   \   00000076   ....               RJMP    ?Subroutine14
   \   00000078                      REQUIRE _A_TWCR
   \   00000078                      REQUIRE _A_TWDR
   \   00000078                      REQUIRE _A_TWSR
    256          }
    257          
    258          
    259          
    260          uint8_t pageBuffer[PAGE_SIZE+3];
    261          uint16_t addr=0;
    262          
    263          

   \                                 In  segment FARCODE, align 2, keep-with-next
    264          void First_Time(void)
   \                     First_Time:
    265          {
    266            addr=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               LDI     R30, LOW(addr)
   \   00000004   ....               LDI     R31, (addr) >> 8
   \   00000006   8300               ST      Z, R16
   \   00000008   8301               STD     Z+1, R16
    267            InitTWI();
   \   0000000A   ....               RCALL   InitTWI
    268            pageBuffer[0] = TWI_CMD_PAGEUPDATE;
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   9300....           STS     pageBuffer, R16
    269            BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
   \   00000012   ....               RCALL   ?Subroutine12
    270            cycle_reset();
    271            get_slave_status();
   \                     ??CrossCallReturnLabel_25:
   \   00000014   ....               RJMP    get_slave_status
   \   00000016                      REQUIRE _A_PORTC
    272          }

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   9840               CBI     0x08, 0x00
   \   00000002   ....               RJMP    cycle_reset

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     addr:
   \   00000000                      DS8 2
    273          
    274          
    275          uint8_t command_char=0, data_char=0, CRC_HI=0, CRC_LO=0;
    276          uint8_t runApp[2];
   \                     runApp:
   \   00000002                      DS8 2
   \                     statusCode:
   \   00000004                      DS8 1
   \                     success:
   \   00000005                      DS8 1
   \                     over_size_flag:
   \   00000006                      DS8 1
   \                     command_char:
   \   00000007                      DS8 1
   \                     CRC_HI:
   \   00000008                      DS8 1
   \                     CRC_LO:
   \   00000009                      DS8 1
    277          uint8_t reps=0;
   \                     reps:
   \   0000000A                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     pageBuffer:
   \   00000000                      DS8 67

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     data_char:
   \   00000000                      DS8 1
    278          

   \                                 In  segment FARCODE, align 2, keep-with-next
    279          void read_from_slave(void)
   \                     read_from_slave:
    280          {
    281            if (success) 
   \   00000000   9100....           LDS     R16, (addr + 5)
   \   00000004   2300               TST     R16
   \   00000006   F019               BREQ    ??read_from_slave_0
    282            {
    283          	do {
    284          		success = MasterReceive( SLAVE_ADDRESS, &statusCode, 1 );
   \                     ??read_from_slave_1:
   \   00000008   ....               RCALL   ?Subroutine7
    285          	} while ( !success );                                 
   \                     ??CrossCallReturnLabel_30:
   \   0000000A   2300               TST     R16
   \   0000000C   F3E9               BREQ    ??read_from_slave_1
    286            }
    287          }
   \                     ??read_from_slave_0:
   \   0000000E   9508               RET
    288          
    289          
    290          

   \                                 In  segment FARCODE, align 2, keep-with-next
    291          void read_and_send(uint8_t whichversion)
   \                     read_and_send:
    292          {
   \   00000000   ....               RCALL   ?Subroutine6
    293            runApp[0]=whichversion;
    294            runApp[1]=whichversion;
    295            BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
    296            cycle_reset();
    297            get_slave_status();                  
    298            success = MasterTransmit( SLAVE_ADDRESS, runApp, 2 );
    299            read_from_slave();
   \                     ??CrossCallReturnLabel_27:
   \   00000002   ....               RCALL   ?Subroutine8
    300            sendchar( statusCode );		  
   \                     ??CrossCallReturnLabel_13:
   \   00000004                      REQUIRE ?Subroutine15
   \   00000004                      REQUIRE _A_PORTC
   \   00000004                      ;               // Fall through to label ?Subroutine15
    301          } 

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ........           JMP     sendchar

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   9300....           STS     (addr + 2), R16
   \   00000004   9300....           STS     (addr + 3), R16
   \   00000008   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_24:
   \   0000000A   ....               RCALL   get_slave_status
   \   0000000C   E042               LDI     R20, 2
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ....               LDI     R18, LOW((addr + 2))
   \   00000012   ....               LDI     R19, HIGH((addr + 2))
   \   00000014   ....               RJMP    ?Subroutine11

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   EB00               LDI     R16, 176
   \   00000002   ....               RCALL   MasterTransmit
   \   00000004   ....               RJMP    ?Subroutine13

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   ....               RCALL   read_from_slave
   \   00000002   9100....           LDS     R16, (addr + 4)
   \   00000006   9508               RET
    302          
    303          void send_command(uint8_t command)
   \                     send_command:
   \   00000000                      REQUIRE ?Subroutine6
   \   00000000                      REQUIRE _A_PORTC
   \   00000000                      ;               // Fall through to label ?Subroutine6
    304          {
    305            runApp[0] = command;
    306            runApp[1] = command;
    307            BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
    308            cycle_reset();
    309            get_slave_status();
    310            success = MasterTransmit( SLAVE_ADDRESS, runApp, 2 );     
    311          }
    312          
    313          
    314          /*************************************************************************/

   \                                 In  segment FARCODE, align 2, keep-with-next
    315          __C_task void main(void)
   \                     main:
    316          {
    317          	unsigned int temp_int;
    318          	unsigned char val=0;                
    319                   
    320          
    321          	InitTWI();
   \   00000000   ....               RCALL   InitTWI
    322          
    323                         
    324                  BOOT_DDR_REG |= (1 << BOOT_PIN);
   \   00000002   9A38               SBI     0x07, 0x00
    325                  BOOT_PORT_REG &= ~(1 << BOOT_PIN);
   \   00000004   9840               CBI     0x08, 0x00
    326            
    327                  RESET_DDR_REG |= (1 << RESET_PIN);                        		
   \   00000006   9A39               SBI     0x07, 0x01
    328          	RESET_PORT_REG |= (1 << RESET_PIN);	                                
   \   00000008   9A41               SBI     0x08, 0x01
    329          	
    330          	initbootuart(); // Initialize UART.
   \   0000000A   ........           CALL    initbootuart
   \   0000000E   ....               LDI     R26, LOW(addr)
   \   00000010   ....               LDI     R27, (addr) >> 8
   \   00000012   C029               RJMP    ??CrossCallReturnLabel_42
    331          	/* Main loop */
    332          	for(;;)          
    333          	{      
    334          	      val=recchar(); // Wait for command character.
    335                          
    336                        if(( val ==  'P') || ( val == 'L'))
    337                        {               
    338                          sendchar('\r');
    339                        }
    340                        
    341                        else if(val == 'E')
    342                        {
    343                          sendchar('\r');
    344                        }
    345                                   
    346                        // Read lock byte -> execute command
    347                        else if( val == 'r')
    348                        {
    349                          if( command_char == 'a')
    350                          {
    351                            BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
    352                            read_and_send( TWI_CMD_AVERSION );
    353                          }
    354                          else if( command_char == 'b' )
   \                     ??main_0:
   \   00000014   3602               CPI     R16, 98
   \   00000016   F421               BRNE    ??main_1
    355                          {
    356                            BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
   \                     ??main_2:
   \   00000018   9840               CBI     0x08, 0x00
    357                            read_and_send( TWI_CMD_BVERSION );
   \   0000001A   E004               LDI     R16, 4
   \                     ??main_3:
   \   0000001C   ....               RCALL   read_and_send
   \   0000001E   C023               RJMP    ??CrossCallReturnLabel_42
    358                          }                             
    359                          else if( command_char == 'd' )
   \                     ??main_1:
   \   00000020   3604               CPI     R16, 100
   \   00000022   F419               BRNE    ??main_4
    360                          {
    361                              // Read CRCHI
    362                            sendchar(CRC_HI);
   \   00000024   9100....           LDS     R16, (addr + 8)
   \   00000028   C01D               RJMP    ??main_5
    363                          }
    364                          else if( command_char == 'e' )
   \                     ??main_4:
   \   0000002A   3605               CPI     R16, 101
   \   0000002C   F419               BRNE    ??main_6
    365                          {
    366                              // Read CRCLO
    367                            sendchar(CRC_LO);
   \   0000002E   9100....           LDS     R16, (addr + 9)
   \   00000032   C018               RJMP    ??main_5
    368                          }
    369                          else if( command_char == 'f' )
   \                     ??main_6:
   \   00000034   3606               CPI     R16, 102
   \   00000036   F419               BRNE    ??main_7
    370                          {
    371                              BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
   \   00000038   9840               CBI     0x08, 0x00
    372                              // Status condition
    373                              read_and_send(TWI_CMD_GETERRCONDN);
   \   0000003A   E007               LDI     R16, 7
   \   0000003C   CFEF               RJMP    ??main_3
    374                          }
    375                          else 
    376                            sendchar(0xFF);
   \                     ??main_7:
   \   0000003E   EF0F               LDI     R16, 255
   \   00000040   C011               RJMP    ??main_5
    377                       
    378                        }
    379                        // Write lock byte -> load command
    380                        else if( val == 'l')
   \                     ??main_8:
   \   00000042   360C               CPI     R16, 108
   \   00000044   F501               BRNE    ??main_9
    381                        {
    382                          command_char = recchar();
   \   00000046   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_23:
   \   00000048   9300....           STS     (addr + 7), R16
    383                          if( command_char == 'c' )
   \   0000004C   3603               CPI     R16, 99
   \   0000004E   F449               BRNE    ??main_10
    384                          {
    385                            BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
   \   00000050   9840               CBI     0x08, 0x00
    386                            send_command( TWI_CMD_CRCCHECK );
   \   00000052   E006               LDI     R16, 6
   \   00000054   ....               RCALL   send_command
    387                            read_from_slave();
   \   00000056   ....               RCALL   ?Subroutine8
    388                            CRC_HI= statusCode;
   \                     ??CrossCallReturnLabel_14:
   \   00000058   9300....           STS     (addr + 8), R16
    389                            read_from_slave();
   \   0000005C   ....               RCALL   ?Subroutine8
    390                            CRC_LO = statusCode;
    391                          }       
    392                          sendchar('\r');
    393                        }
   \                     ??CrossCallReturnLabel_15:
   \   0000005E   9300....           STS     (addr + 9), R16
   \                     ??main_10:
   \   00000062   E00D               LDI     R16, 13
   \                     ??main_5:
   \   00000064   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_42:
   \   00000066   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_22:
   \   00000068   3500               CPI     R16, 80
   \   0000006A   F3D9               BREQ    ??main_10
   \   0000006C   340C               CPI     R16, 76
   \   0000006E   F3C9               BREQ    ??main_10
   \   00000070   3405               CPI     R16, 69
   \   00000072   F3B9               BREQ    ??main_10
   \   00000074   3702               CPI     R16, 114
   \   00000076   F729               BRNE    ??main_8
   \   00000078   9100....           LDS     R16, (addr + 7)
   \   0000007C   3601               CPI     R16, 97
   \   0000007E   F651               BRNE    ??main_0
   \                     ??main_11:
   \   00000080   9840               CBI     0x08, 0x00
   \   00000082   E003               LDI     R16, 3
   \   00000084   CFCB               RJMP    ??main_3
    394                        
    395                        // Read high fuse bits -> BVERSION 
    396                        else if( val == 'N' )
   \                     ??main_9:
   \   00000086   340E               CPI     R16, 78
   \   00000088   F239               BREQ    ??main_2
    397                        {
    398                           BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
    399                           read_and_send( TWI_CMD_BVERSION );
    400                        }   
    401                        
    402                        // Low Fuse Bits -> AVERSION
    403                        else if( val == 'F' )
   \   0000008A   3406               CPI     R16, 70
   \   0000008C   F3C9               BREQ    ??main_11
    404                        {
    405                          BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
    406                          read_and_send( TWI_CMD_AVERSION );
    407                        }                            
    408                                      
    409                        else  if(val == 'a' )
   \   0000008E   3601               CPI     R16, 97
   \   00000090   F411               BRNE    ??main_12
    410          	      {
    411          		sendchar('Y'); // Yes, we do autoincrement.
   \   00000092   E509               LDI     R16, 89
   \   00000094   CFE7               RJMP    ??main_5
    412          	      }                   
    413          	                                                                          
    414                        else if(val=='A') // Set address...
   \                     ??main_12:
   \   00000096   3401               CPI     R16, 65
   \   00000098   F4D9               BRNE    ??main_13
    415          	      {   // NOTE: Flash addresses are given in words, not bytes.
    416                            addr =(recchar()<<8) | recchar(); // Read address high and low byte.
    417          		  addr = addr<<1;
   \   0000009A   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_21:
   \   0000009C   2F90               MOV     R25, R16
   \   0000009E   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_20:
   \   000000A0   2F80               MOV     R24, R16
   \   000000A2   0F88               LSL     R24
   \   000000A4   1F99               ROL     R25
   \   000000A6   938D               ST      X+, R24
   \   000000A8   939C               ST      X, R25
   \   000000AA   9711               SBIW    R27:R26, 1
    418                            if(addr > MAX__APP_ADDR) over_size_flag =1;
   \   000000AC   910D               LD      R16, X+
   \   000000AE   2F19               MOV     R17, R25
   \   000000B0   3001               CPI     R16, 1
   \   000000B2   4118               SBCI    R17, 24
   \   000000B4   F018               BRCS    ??main_14
   \   000000B6   E001               LDI     R16, 1
   \   000000B8   9300....           STS     (addr + 6), R16
    419          		  pageBuffer[1] = (uint8_t)(addr&0x00FF);
   \                     ??main_14:
   \   000000BC   9380....           STS     (pageBuffer + 1), R24
    420          		  addr = addr>>8;
   \   000000C0   9711               SBIW    R27:R26, 1
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   939D               ST      X+, R25
   \   000000C6   931C               ST      X, R17
    421          		  pageBuffer[2] = (uint8_t)(addr&0x00FF);
   \   000000C8   9711               SBIW    R27:R26, 1
   \   000000CA   9390....           STS     (pageBuffer + 2), R25
   \   000000CE   CFC9               RJMP    ??main_10
    422          		  sendchar('\r'); // Send OK back.  
    423          
    424          	      }
    425                        
    426                      // Chip erase.  
    427                       else if(val == 'e' )	    
   \                     ??main_13:
   \   000000D0   3605               CPI     R16, 101
   \   000000D2   F419               BRNE    ??main_15
    428          	     {
    429                           runApp[0] =  TWI_CMD_ERASEFLASH;
   \   000000D4   E005               LDI     R16, 5
   \   000000D6   ....               RCALL   ?Subroutine6
    430                           runApp[1] =  TWI_CMD_ERASEFLASH;
    431                           BOOT_PORT_REG &= ~( 1 << BOOT_PIN );
    432                           cycle_reset();
    433                           get_slave_status();
    434                           success = MasterTransmit( SLAVE_ADDRESS, runApp, 2 );
    435          		 sendchar('\r'); // Send OK back.
    436          	      }
   \                     ??CrossCallReturnLabel_26:
   \   000000D8   CFC4               RJMP    ??main_10
    437                                 
    438          	      // Check block load support.                                                   
    439                        else if(val == 'b' )
   \                     ??main_15:
   \   000000DA   3602               CPI     R16, 98
   \   000000DC   F431               BRNE    ??main_16
    440          	      {
    441          		  sendchar('Y'); // Report block load supported.
   \   000000DE   E509               LDI     R16, 89
   \   000000E0   ....               RCALL   ?Subroutine15
    442          		  sendchar((BLOCKSIZE>>8) & 0xFF); // MSB first.
   \                     ??CrossCallReturnLabel_41:
   \   000000E2   E000               LDI     R16, 0
   \   000000E4   ....               RCALL   ?Subroutine15
    443          		  sendchar(BLOCKSIZE&0xFF); // Report BLOCKSIZE (bytes).
   \                     ??CrossCallReturnLabel_40:
   \   000000E6   E400               LDI     R16, 64
   \   000000E8   CFBD               RJMP    ??main_5
    444          	      }
    445                               
    446          	      // Start block load.                                       
    447                        else  if(val == 'B' )
   \                     ??main_16:
   \   000000EA   3402               CPI     R16, 66
   \   000000EC   F4F1               BRNE    ??main_17
    448          	      {
    449                           
    450          		  temp_int = (recchar()<<8) | recchar(); // Get block size.
   \   000000EE   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_19:
   \   000000F0   2F80               MOV     R24, R16
   \   000000F2   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_18:
   \   000000F4   2FA0               MOV     R26, R16
    451          		  val = recchar(); // Get memtype.
   \   000000F6   ....               RCALL   ?Subroutine10
    452          		  sendchar( BlockLoad(temp_int,val) ); // Block load.
   \                     ??CrossCallReturnLabel_17:
   \   000000F8   2F20               MOV     R18, R16
   \   000000FA   2F18               MOV     R17, R24
   \   000000FC   2F0A               MOV     R16, R26
   \   000000FE   ....               RCALL   BlockLoad
   \   00000100   ....               RCALL   ?Subroutine15
    453                             if(reps == 0)
   \                     ??CrossCallReturnLabel_39:
   \   00000102   ....               LDI     R26, LOW(addr)
   \   00000104   9100....           LDS     R16, (addr + 10)
   \   00000108   2300               TST     R16
   \   0000010A   F409               BRNE    ??main_18
    454                                First_Time();
   \   0000010C   ....               RCALL   First_Time
    455                            success = MasterTransmit( SLAVE_ADDRESS, pageBuffer, PAGE_SIZE+3 );
   \                     ??main_18:
   \   0000010E   E443               LDI     R20, 67
   \   00000110   E050               LDI     R21, 0
   \   00000112   ....               LDI     R18, LOW(pageBuffer)
   \   00000114   ....               LDI     R19, (pageBuffer) >> 8
   \   00000116   ....               RCALL   ?Subroutine11
    456                            if (success) 
   \                     ??CrossCallReturnLabel_28:
   \   00000118   2300               TST     R16
   \   0000011A   F009               BREQ    ??main_19
    457                            {
    458                                        get_slave_status();
   \   0000011C   ....               RCALL   get_slave_status
    459                            }           
    460                            reps ++;
   \                     ??main_19:
   \   0000011E   961A               ADIW    R27:R26, 10
   \   00000120   910C               LD      R16, X
   \   00000122   9503               INC     R16
   \   00000124   930C               ST      X, R16
   \   00000126   971A               SBIW    R27:R26, 10
   \   00000128   CF9E               RJMP    ??CrossCallReturnLabel_42
    461                        }
    462                              
    463                      // Return programmer identifier.                                       
    464                      else if(val == 'S' )
   \                     ??main_17:
   \   0000012A   3503               CPI     R16, 83
   \   0000012C   F481               BRNE    ??main_20
    465                      {
    466          		sendchar('A'); // Return 'AVRBOOT'.
   \   0000012E   E401               LDI     R16, 65
   \   00000130   ....               RCALL   ?Subroutine15
    467          		sendchar('V'); // Software identifier (aka programmer signature) is always 7 characters.
   \                     ??CrossCallReturnLabel_38:
   \   00000132   E506               LDI     R16, 86
   \   00000134   ....               RCALL   ?Subroutine15
    468          		sendchar('R');
   \                     ??CrossCallReturnLabel_37:
   \   00000136   E502               LDI     R16, 82
   \   00000138   ....               RCALL   ?Subroutine15
    469          		sendchar('B');
   \                     ??CrossCallReturnLabel_36:
   \   0000013A   E402               LDI     R16, 66
   \   0000013C   ....               RCALL   ?Subroutine15
    470          		sendchar('O');
   \                     ??CrossCallReturnLabel_35:
   \   0000013E   ....               RCALL   ?Subroutine9
    471          		sendchar('O');
   \                     ??CrossCallReturnLabel_44:
   \   00000140   ....               RCALL   ?Subroutine9
    472          		sendchar('T');
   \                     ??CrossCallReturnLabel_43:
   \   00000142   E504               LDI     R16, 84
   \   00000144   ....               RCALL   ?Subroutine15
    473          		reps =0;              
   \                     ??CrossCallReturnLabel_34:
   \   00000146   E000               LDI     R16, 0
   \   00000148   9300....           STS     (addr + 10), R16
   \   0000014C   CF8C               RJMP    ??CrossCallReturnLabel_42
    474          	    }            
    475                       
    476                       // Return software version.		
    477                       else if(val == 'V' )             
   \                     ??main_20:
   \   0000014E   3506               CPI     R16, 86
   \   00000150   F439               BRNE    ??main_21
    478          	     {                                
    479                           send_command(TWI_CMD_EXECUTEAPP);   
   \   00000152   E002               LDI     R16, 2
   \   00000154   ....               RCALL   send_command
    480                          // Disable bootloader mode for slave
    481                           BOOT_PORT_REG |= (1 << BOOT_PIN);                 
   \   00000156   9A40               SBI     0x08, 0x00
    482            		 sendchar('2');
   \   00000158   E302               LDI     R16, 50
   \   0000015A   ....               RCALL   ?Subroutine15
    483          		 sendchar('0');                
   \                     ??CrossCallReturnLabel_33:
   \   0000015C   E300               LDI     R16, 48
   \   0000015E   CF82               RJMP    ??main_5
    484                        }
    485          
    486          	     // Return signature bytes.		
    487                       else if(val == 's')
   \                     ??main_21:
   \   00000160   3703               CPI     R16, 115
   \   00000162   F431               BRNE    ??main_22
    488                       {
    489          		sendchar( SIGNATURE_BYTE_3 );
   \   00000164   E001               LDI     R16, 1
   \   00000166   ....               RCALL   ?Subroutine15
    490          		sendchar( SIGNATURE_BYTE_2 );
   \                     ??CrossCallReturnLabel_32:
   \   00000168   E908               LDI     R16, 152
   \   0000016A   ....               RCALL   ?Subroutine15
    491          		sendchar( SIGNATURE_BYTE_1 );
   \                     ??CrossCallReturnLabel_31:
   \   0000016C   E10E               LDI     R16, 30
   \   0000016E   CF7A               RJMP    ??main_5
    492                       }
    493                                                                     
    494                       else if(val != 0x1b)                  // If not ESC, then it is unrecognized...
   \                     ??main_22:
   \   00000170   310B               CPI     R16, 27
   \   00000172   F409               BRNE    $+2+2
   \   00000174   CF78               RJMP    ??CrossCallReturnLabel_42
    495          		sendchar('?');			                                                
   \   00000176   E30F               LDI     R16, 63
   \   00000178   CF75               RJMP    ??main_5
   \   0000017A                      REQUIRE _A_PORTC
   \   0000017A                      REQUIRE _A_DDRC
    496                      
    497          	} // end: for(;;)
    498          } // end: main

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   E40F               LDI     R16, 79
   \   00000002   ....               RJMP    ?Subroutine15

   \                                 In  segment FARCODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ........           JMP     recchar
    499          

   \                                 In  segment FARCODE, align 2, keep-with-next
    500          unsigned char BlockLoad(unsigned int size, unsigned char mem)
   \                     BlockLoad:
    501          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    502          	// Flash memory type.
    503            if(!over_size_flag) // Check for file size to be less than maximum pages that can be programmed
   \   00000006   9100....           LDS     R16, (addr + 6)
   \   0000000A   2300               TST     R16
   \   0000000C   F481               BRNE    ??BlockLoad_0
    504            {
    505                   if(mem=='F')
   \   0000000E   3426               CPI     R18, 70
   \   00000010   F489               BRNE    ??BlockLoad_1
    506          	{ 
    507          		for (uint16_t i = 0; i < size; ++i)
   \   00000012   E0A0               LDI     R26, 0
   \   00000014   E0B0               LDI     R27, 0
   \   00000016   C006               RJMP    ??BlockLoad_2
    508          		{			
    509                                pageBuffer[i+3] = recchar();
   \                     ??BlockLoad_3:
   \   00000018   ....               RCALL   ?Subroutine10
    510          		}  
   \                     ??CrossCallReturnLabel_16:
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   ....               SUBI    R30, LOW((-(pageBuffer) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(pageBuffer) & 0xFFFF) >> 8
   \   00000020   8303               STD     Z+3, R16
   \   00000022   9611               ADIW    R27:R26, 1
   \                     ??BlockLoad_2:
   \   00000024   17A8               CP      R26, R24
   \   00000026   07B9               CPC     R27, R25
   \   00000028   F3B8               BRCS    ??BlockLoad_3
    511                          return '\r'; // Report programming OK
   \   0000002A   E00D               LDI     R16, 13
   \   0000002C   C004               RJMP    ??BlockLoad_4
    512                    }
    513          			
    514          	// Invalid memory type?
    515          	else
    516          	{
    517          	  return '?';
    518          	}
    519            }
    520            else
    521            {
    522            over_size_flag=0;
   \                     ??BlockLoad_0:
   \   0000002E   E000               LDI     R16, 0
   \   00000030   9300....           STS     (addr + 6), R16
    523               return '?';
   \                     ??BlockLoad_1:
   \   00000034   E30F               LDI     R16, 63
   \                     ??BlockLoad_4:
   \   00000036   E0E4               LDI     R30, 4
   \   00000038   ........           JMP     ?EPILOGUE_B4_L09
    524            }
    525          }

   Maximum stack usage in bytes:

     Function              CSTACK RSTACK
     --------              ------ ------
     BlockLoad                 4      3
       -> recchar              4      3
     First_Time                0      3
       -> InitTWI              0      3
       -> cycle_reset          0      3
       -> get_slave_status     0      3
     InitTWI                   0      3
     MasterReceive             0      3
     MasterTransmit            0      3
     cycle_reset               0      3
     get_slave_status          0      3
       -> MasterReceive        0      3
     main                      0      3
       -> InitTWI              0      3
       -> initbootuart         0      3
       -> read_and_send        0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> read_and_send        0      3
       -> sendchar             0      3
       -> recchar              0      3
       -> send_command         0      3
       -> read_from_slave      0      3
       -> read_from_slave      0      3
       -> sendchar             0      3
       -> recchar              0      3
       -> read_and_send        0      3
       -> read_and_send        0      3
       -> read_and_send        0      3
       -> sendchar             0      3
       -> recchar              0      3
       -> recchar              0      3
       -> cycle_reset          0      3
       -> get_slave_status     0      3
       -> MasterTransmit       0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> recchar              0      3
       -> recchar              0      3
       -> recchar              0      3
       -> BlockLoad            0      3
       -> sendchar             0      3
       -> First_Time           0      3
       -> MasterTransmit       0      3
       -> get_slave_status     0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> send_command         0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
       -> sendchar             0      3
     read_and_send             0      3
       -> cycle_reset          0      3
       -> get_slave_status     0      3
       -> MasterTransmit       0      3
       -> read_from_slave      0      3
       -> sendchar             0      3
     read_from_slave           0      3
       -> MasterReceive        0      3
     send_command              0      3
       -> cycle_reset          0      3
       -> get_slave_status     0      3
       -> MasterTransmit       0      3


   Segment part sizes:

     Function/Label   Bytes
     --------------   -----
     _A_TWCR             1
     _A_TWDR             1
     _A_TWSR             1
     _A_TWBR             1
     _A_PORTD            1
     _A_DDRD             1
     _A_PORTC            1
     _A_DDRC             1
     InitTWI            24
     ??Subroutine17_0    6
     cycle_reset         6
     ?Subroutine1       16
     MasterReceive     122
     ?Subroutine14       4
     ?Subroutine0        4
     ??Subroutine16_0    2
     ?Subroutine5       10
     ?Subroutine4        6
     ?Subroutine3        6
     ?Subroutine2       10
     get_slave_status   16
     ?Subroutine7       12
     ?Subroutine13       6
     MasterTransmit    120
     First_Time         22
     ?Subroutine12       4
     addr               11
     runApp
     statusCode
     success
     over_size_flag
     command_char
     CRC_HI
     CRC_LO
     reps
     pageBuffer         67
     data_char           1
     read_from_slave    16
     read_and_send       4
     ?Subroutine15       4
     ?Subroutine6       22
     ?Subroutine11       6
     ?Subroutine8        8
     send_command        0
     main              378
     ?Subroutine9        4
     ?Subroutine10       4
     BlockLoad          60
      Others             7

 
   8 bytes in segment ABSOLUTE
 902 bytes in segment FARCODE
   7 bytes in segment INITTAB
  79 bytes in segment NEAR_Z
 
 902 bytes of CODE memory (+ 7 bytes shared)
  79 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
